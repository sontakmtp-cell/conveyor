Mục tiêu: Tái cấu trúc và triển khai lại toàn bộ tính năng lựa chọn bộ truyền động, tích hợp logic tối ưu đa mục tiêu (Độ chính xác - Chi phí - Độ bền) và hiển thị kết quả trong mục Cấu trúc Puly/Con lăn.

Logic tối ưu mới:
1.  **Ưu tiên Chi phí:** Thuật toán sẽ duyệt qua các tỉ số truyền của hộp số từ CAO xuống THẤP (ví dụ: 100, 80, 60...), vì tỉ số truyền càng cao giá thành càng rẻ.
2.  **Kiểm tra Độ bền:** Với mỗi tổ hợp, phần mềm sẽ tính toán lực căng thực tế trên xích và so sánh với "lực bền kéo tối thiểu" từ bảng tra (có nhân hệ số an toàn). Những loại xích không đủ bền sẽ bị loại bỏ ngay lập tức.
3.  **Tối ưu Độ chính xác:** Từ những giải pháp đã vượt qua bài kiểm tra độ bền, phần mềm sẽ chọn ra giải pháp có sai số vận tốc thấp nhất so với yêu cầu.

---
### Giai đoạn 1: Tái cấu trúc Models dữ liệu
Mục tiêu: Tạo ra các cấu trúc dữ liệu rõ ràng để chứa thông tin về một giải pháp truyền động hoàn chỉnh.

1.  **Tạo Model `TransmissionSolution`:**
    * **File:** `core/models.py`
    * **Hành động:** Định nghĩa một Pydantic model mới để lưu trữ một giải pháp hoàn chỉnh.
      ```python
      class TransmissionSolution(BaseModel):
          gearbox_ratio: int = Field(..., description="Tỉ số truyền của hộp số")
          chain_spec: ChainSpec = Field(..., description="Thông số kỹ thuật của loại xích được chọn")
          drive_sprocket_teeth: int = Field(..., description="Số răng nhông dẫn (z1)")
          driven_sprocket_teeth: int = Field(..., description="Số răng nhông bị dẫn (z2)")
          actual_belt_velocity: float = Field(..., description="Vận tốc băng tải thực tế (m/s)")
          error_percentage: float = Field(..., description="Phần trăm sai số so với vận tốc yêu cầu")
      ```

2.  **Cập nhật `CalculationResult`:**
    * **File:** `core/models.py`
    * **Hành động:** Thay đổi model kết quả chính để chứa giải pháp truyền động.
      ```python
      class CalculationResult(BaseModel):
          # ... các trường dữ liệu khác giữ nguyên
          transmission_solution: Optional[TransmissionSolution] = None
          # ...
      ```

---
### Giai đoạn 2: Bổ sung Dữ liệu và Hằng số Kỹ thuật
Mục tiêu: Tập trung các hằng số và dữ liệu đầu vào cho việc tính toán.

1.  **Định nghĩa Tỉ số truyền Hộp số:**
    * **File:** `core/specs.py`
    * **Hành động:** Tạo danh sách tỉ số truyền tiêu chuẩn, **sắp xếp giảm dần** để ưu tiên chi phí.
      ```python
      # Sắp xếp từ cao xuống thấp để ưu tiên hộp số rẻ tiền hơn
      STANDARD_GEARBOX_RATIOS = sorted([10, 15, 18, 20, 25, 30, 32, 40, 50, 60, 80, 100], reverse=True)
      ```

2.  **Định nghĩa Hằng số An toàn:**
    * **File:** `core/specs.py`
    * **Hành động:** Thêm hằng số cho việc tính toán độ bền.
      ```python
      # Hệ số an toàn cho độ bền kéo của xích (thường từ 7 đến 10)
      CHAIN_TENSILE_STRENGTH_SAFETY_FACTOR = 8
      ```

---
### Giai đoạn 3: Xây dựng lại Hoàn toàn Engine Tính toán
Mục tiêu: Implement thuật toán tối ưu đa mục tiêu mới.

1.  **Tạo Hàm Tính toán Chính `find_optimal_transmission`:**
    * **File:** `core/engine.py`
    * **Hành động:** Viết một hàm mới thay thế cho logic cũ.
    * **Input:** `calculation_params: CalculationParams`, `chain_specs: list[ChainSpec]`
    * **Output:** `Optional[TransmissionSolution]`

2.  **Các bước trong Hàm `find_optimal_transmission`:**
    a. **Tính toán Lực & Công suất:**
       * Dựa vào `calculation_params`, sử dụng các công thức từ file PDF để tính **Công suất yêu cầu (kW)** và **Momen xoắn (Nm)** tại trục puly. Đây là bước nền tảng để kiểm tra độ bền.

    b. **Khởi tạo Vòng lặp Tìm kiếm:**
       * `valid_solutions = []`
       * `for gearbox_ratio in STANDARD_GEARBOX_RATIOS:` (Ưu tiên chi phí)
       * `for chain_spec in chain_specs:` (Duyệt qua từng loại xích)
       * `for z1 in range(17, 26):` (Duyệt qua các số răng nhông dẫn phổ biến)

    c. **Bên trong Vòng lặp - Tính toán và Kiểm tra:**
       * Tính toán `z2_actual` (số răng nhông bị dẫn) dựa trên `gearbox_ratio` và `z1`.
       * **KIỂM TRA ĐỘ BỀN (QUAN TRỌNG):**
         * Tính Momen xoắn tại trục nhông bị dẫn (`z2`).
         * Tính Lực căng tiếp tuyến trên dây xích (`Ft`).
         * `required_tensile_strength = Ft * CHAIN_TENSILE_STRENGTH_SAFETY_FACTOR`.
         * **Nếu `chain_spec.tensile_strength_kn * 1000 < required_tensile_strength`:**
           * `continue` # Bỏ qua vì xích không đủ bền.
       * **Nếu đủ bền:**
         * Tính vận tốc thực tế và sai số.
         * Tạo một đối tượng `TransmissionSolution` và thêm vào `valid_solutions`.

    d. **Lựa chọn Giải pháp Tốt nhất:**
       * Sau khi các vòng lặp kết thúc, nếu `valid_solutions` rỗng, `return None`.
       * Ngược lại, **sắp xếp `valid_solutions` theo `error_percentage` tăng dần**.
       * `return valid_solutions[0]` # Trả về giải pháp có sai số thấp nhất.

3.  **Tích hợp vào Hàm `calculate()`:**
    * **File:** `core/engine.py`
    * **Hành động:** Trong hàm `calculate`, gọi `find_optimal_transmission` và gán kết quả cho `result.transmission_solution`.

---
### Giai đoạn 4: Cập nhật Giao diện Người dùng (UI)
Mục tiêu: Hiển thị kết quả bộ truyền động trong mục "Cấu trúc".

1.  **Tổ chức lại Bảng Kết quả:**
    * **File:** `ui/ui_components_3d_enhanced.py`
    * **Hành động:**
        * Tìm đến `class OutputPanel`, bên trong `StructureOutputGroup` (là group chứa thông tin Puly, Con lăn).
        * Tạo một `QGroupBox` mới với tiêu đề là **"Bộ truyền động hoàn chỉnh"**.
        * Bên trong `QGroupBox` này, thêm các `QLabel` để hiển thị các thông tin sau:
            * `self.gearbox_ratio_label = QLabel("Chưa xác định")`
            * `self.chain_type_label = QLabel("Chưa xác định")`
            * `self.drive_sprocket_label = QLabel("Chưa xác định")`
            * `self.driven_sprocket_label = QLabel("Chưa xác định")`
            * `self.actual_velocity_label = QLabel("Chưa xác định")`
        * Sắp xếp các label này vào một layout (ví dụ `QFormLayout`) để hiển thị đẹp mắt.

2.  **Cập nhật Logic Hiển thị:**
    * **File:** `ui/main_window_3d_enhanced.py`
    * **Hành động:**
        * Trong hàm `display_results(self, result: CalculationResult)`, thêm logic mới:
        * Kiểm tra `if result.transmission_solution:`
            * Nếu có, cập nhật text cho các label đã tạo ở trên bằng dữ liệu từ `result.transmission_solution`.
              ```python
              solution = result.transmission_solution
              self.output_panel.gearbox_ratio_label.setText(f"1 : {solution.gearbox_ratio}")
              self.output_panel.chain_type_label.setText(f"{solution.chain_spec.model}")
              # ... tương tự cho các label khác
              ```
            * Nếu không (`else`), hiển thị thông báo "Không tìm thấy giải pháp phù hợp" cho tất cả các label đó.

---
### Giai đoạn 5: Cập nhật Báo cáo Xuất file
Mục tiêu: Đưa thông tin bộ truyền động vào file PDF và Excel.

1.  **Cập nhật Exporter PDF và Excel:**
    * **Files:** `reports/exporter_pdf.py`, `reports/exporter_excel.py`
    * **Hành động:**
        * Trong các hàm tạo báo cáo, thêm một mục mới với tiêu đề **"Thông số bộ truyền động"**.
        * Kiểm tra sự tồn tại của `result.transmission_solution`.
        * Nếu có, điền đầy đủ các thông số của bộ truyền động vào bảng/các ô tương ứng trong báo cáo.