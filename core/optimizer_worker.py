# core/optimizer_worker.py
# -*- coding: utf-8 -*-

from PySide6.QtCore import QObject, Signal, Slot
from core.models import ConveyorParameters
from core.optimizer.models import OptimizerSettings
from core.optimizer.optimizer import Optimizer

class OptimizerWorker(QObject):
    """Worker to run the optimization process in a separate thread."""
    finished = Signal(list)  # Emits list of DesignCandidate results
    progress = Signal(int)   # Emits progress percentage
    status = Signal(str)   # Emits status updates

    def __init__(self, base_params: ConveyorParameters, opt_settings: OptimizerSettings):
        super().__init__()
        self.base_params = base_params
        self.opt_settings = opt_settings

    @Slot()
    def run(self):
        """Execute the optimization."""
        try:
            self.status.emit("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·ªëi ∆∞u h√≥a n√¢ng cao...")
            
            # Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
            if not self.base_params:
                raise ValueError("Tham s·ªë c∆° b·∫£n kh√¥ng h·ª£p l·ªá")
            
            if not self.opt_settings:
                raise ValueError("C√†i ƒë·∫∑t t·ªëi ∆∞u h√≥a kh√¥ng h·ª£p l·ªá")
            
            self.status.emit("üîß Kh·ªüi t·∫°o b·ªô t·ªëi ∆∞u h√≥a...")
            optimizer = Optimizer(self.base_params, self.opt_settings)
            
            # C·∫£i thi·ªán B∆Ø·ªöC 6: ƒêi·ªÅu ch·ªânh parameters trong OptimizerWorker
            # T√≠nh to√°n parameters d·ª±a tr√™n ƒë·ªô ph·ª©c t·∫°p c·ªßa b√†i to√°n
            base_width = self.base_params.B_mm
            capacity = self.base_params.Qt_tph
            
            # ƒêi·ªÅu ch·ªânh population_size d·ª±a tr√™n ƒë·ªô ph·ª©c t·∫°p
            if capacity > 1000 or base_width > 1200:
                # B√†i to√°n ph·ª©c t·∫°p: tƒÉng population v√† generations
                population_size = 80
                generations = 40
                self.status.emit("üìä B√†i to√°n ph·ª©c t·∫°p - S·ª≠ d·ª•ng population l·ªõn v√† nhi·ªÅu th·∫ø h·ªá")
            elif capacity > 500 or base_width > 800:
                # B√†i to√°n trung b√¨nh
                population_size = 60
                generations = 35
                self.status.emit("üìä B√†i to√°n trung b√¨nh - S·ª≠ d·ª•ng tham s·ªë c√¢n b·∫±ng")
            else:
                # B√†i to√°n ƒë∆°n gi·∫£n: gi·∫£m ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
                population_size = 40
                generations = 30
                self.status.emit("üìä B√†i to√°n ƒë∆°n gi·∫£n - S·ª≠ d·ª•ng tham s·ªë t·ªëi ∆∞u cho t·ªëc ƒë·ªô")
            
            # ƒêi·ªÅu ch·ªânh mutation_rate d·ª±a tr√™n s·ªë th·∫ø h·ªá
            if generations > 35:
                mutation_rate = 0.15  # TƒÉng mutation cho nhi·ªÅu th·∫ø h·ªá
            elif generations > 25:
                mutation_rate = 0.12  # Mutation v·ª´a ph·∫£i
            else:
                mutation_rate = 0.10  # Mutation th·∫•p cho √≠t th·∫ø h·ªá
            
            # ƒêi·ªÅu ch·ªânh tournament_size d·ª±a tr√™n population_size
            tournament_size = max(3, min(8, population_size // 10))
            
            # ƒêi·ªÅu ch·ªânh elitism_count (s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t√≠nh trong optimizer)
            elitism_count = 0  # ƒê·ªÉ optimizer t·ª± ƒë·ªông t√≠nh to√°n
            
            self.status.emit(f"‚ö° ƒêang ch·∫°y thu·∫≠t to√°n di truy·ªÅn v·ªõi {generations} th·∫ø h·ªá, {population_size} c√° th·ªÉ...")
            self.status.emit(f"üîß Tham s·ªë: mutation_rate={mutation_rate:.2f}, tournament_size={tournament_size}")
            
            results = optimizer.run(
                generations=generations, 
                population_size=population_size,
                mutation_rate=mutation_rate,
                tournament_size=tournament_size,
                elitism_count=elitism_count
            )
            
            if results:
                self.status.emit(f"‚úÖ T·ªëi ∆∞u h√≥a ho√†n t·∫•t! T√¨m th·∫•y {len(results)} gi·∫£i ph√°p h·ª£p l·ªá.")
                self.finished.emit(results)
            else:
                self.status.emit("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi·∫£i ph√°p h·ª£p l·ªá n√†o.")
                self.finished.emit([])
                
        except Exception as e:
            import traceback
            error_msg = f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {str(e)}"
            print(f"OptimizerWorker Error: {error_msg}")
            print(f"Traceback: {traceback.format_exc()}")
            self.status.emit(error_msg)
            self.finished.emit([])
