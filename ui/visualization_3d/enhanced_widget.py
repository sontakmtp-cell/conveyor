"""
Enhanced 3D Visualization Widget
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                             QCheckBox, QComboBox, QLabel, QPushButton, 
                             QSlider, QSpinBox, QDoubleSpinBox, QTabWidget)
from PyQt6.QtCore import Qt, pyqtSignal, QTimer
from PyQt6.QtGui import QFont

from .core.model_generator import ConveyorModelGenerator
from .core.animation_engine import ConveyorAnimationEngine
from .templates.html_templates import ENHANCED_HTML_TEMPLATE, SIMPLE_HTML_TEMPLATE
from .templates.js_templates import ENHANCED_JS_TEMPLATE, BASIC_JS_TEMPLATE


class EnhancedVisualization3DWidget(QWidget):
    """Widget visualization 3D n√¢ng c·∫•p"""
    
    # Signals
    visualization_updated = pyqtSignal(dict)
    component_selected = pyqtSignal(str)
    animation_state_changed = pyqtSignal(bool)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.model_generator = None
        self.animation_engine = None
        self.current_data = {}
        self.visualization_mode = 'enhanced'
        
        self._setup_ui()
        self._setup_enhanced_features()
        self._setup_connections()
        
        # Timer cho performance monitoring
        self.performance_timer = QTimer()
        self.performance_timer.timeout.connect(self._update_performance_info)
        self.performance_timer.start(1000)  # C·∫≠p nh·∫≠t m·ªói gi√¢y
    
    def _setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán c∆° b·∫£n"""
        self.main_layout = QVBoxLayout(self)
        
        # Header
        header_layout = QHBoxLayout()
        title_label = QLabel("üéØ BƒÉng t·∫£i 3D n√¢ng cao")
        title_label.setFont(QFont("Segoe UI", 16, QFont.Weight.Bold))
        header_layout.addWidget(title_label)
        header_layout.addStretch()
        
        # Mode selector
        self.mode_combo = QComboBox()
        self.mode_combo.addItems(["N√¢ng cao", "ƒê∆°n gi·∫£n", "Ph√¢n t√≠ch"])
        self.mode_combo.setCurrentText("N√¢ng cao")
        header_layout.addWidget(QLabel("Ch·∫ø ƒë·ªô:"))
        header_layout.addWidget(self.mode_combo)
        
        self.main_layout.addLayout(header_layout)
        
        # Main content area
        self.content_layout = QHBoxLayout()
        
        # Left panel - Controls
        self.left_panel = self._create_left_panel()
        self.content_layout.addWidget(self.left_panel, 1)
        
        # Center - Visualization area
        self.visualization_area = self._create_visualization_area()
        self.content_layout.addWidget(self.visualization_area, 4)
        
        # Right panel - Info
        self.right_panel = self._create_right_panel()
        self.content_layout.addWidget(self.right_panel, 1)
        
        self.main_layout.addLayout(self.content_layout)
        
        # Bottom panel - Animation controls
        self.bottom_panel = self._create_bottom_panel()
        self.main_layout.addWidget(self.bottom_panel)
    
    def _create_left_panel(self):
        """T·∫°o panel b√™n tr√°i v·ªõi c√°c controls"""
        panel = QGroupBox("üéõÔ∏è ƒêi·ªÅu khi·ªÉn")
        layout = QVBoxLayout(panel)
        
        # Component visibility controls
        component_group = QGroupBox("Th√†nh ph·∫ßn hi·ªÉn th·ªã")
        component_layout = QVBoxLayout(component_group)
        
        self.chk_belt_system = QCheckBox("BƒÉng t·∫£i")
        self.chk_belt_system.setChecked(True)
        component_layout.addWidget(self.chk_belt_system)
        
        self.chk_drive_system = QCheckBox("H·ªá truy·ªÅn ƒë·ªông")
        self.chk_drive_system.setChecked(True)
        component_layout.addWidget(self.chk_drive_system)
        
        self.chk_support_structure = QCheckBox("Khung ƒë·ª°")
        self.chk_support_structure.setChecked(True)
        component_layout.addWidget(self.chk_support_structure)
        
        self.chk_material_flow = QCheckBox("D√≤ng v·∫≠t li·ªáu")
        self.chk_material_flow.setChecked(True)
        component_layout.addWidget(self.chk_material_flow)
        
        layout.addWidget(component_group)
        
        # Material controls
        material_group = QGroupBox("üé® Ch·∫ø ƒë·ªô hi·ªÉn th·ªã")
        material_layout = QVBoxLayout(material_group)
        
        self.material_combo = QComboBox()
        self.material_combo.addItems(["Th·ª±c t·∫ø", "Wireframe", "Ph√¢n t√≠ch nhi·ªát"])
        material_layout.addWidget(QLabel("Ch·∫ø ƒë·ªô:"))
        material_layout.addWidget(self.material_combo)
        
        layout.addWidget(material_group)
        
        # Camera controls
        camera_group = QGroupBox("üì∑ G√≥c nh√¨n")
        camera_layout = QVBoxLayout(camera_group)
        
        self.camera_preset_combo = QComboBox()
        self.camera_preset_combo.addItems([
            "T·ªïng quan", "H·ªá truy·ªÅn ƒë·ªông", "Con lƒÉn", "BƒÉng t·∫£i", "T√πy ch·ªânh"
        ])
        camera_layout.addWidget(QLabel("G√≥c nh√¨n:"))
        camera_layout.addWidget(self.camera_preset_combo)
        
        self.reset_camera_btn = QPushButton("üîÑ Reset camera")
        camera_layout.addWidget(self.reset_camera_btn)
        
        layout.addWidget(camera_group)
        
        # Performance controls
        performance_group = QGroupBox("‚ö° Hi·ªáu su·∫•t")
        performance_layout = QVBoxLayout(performance_group)
        
        self.chk_shadows = QCheckBox("B√≥ng ƒë·ªï")
        self.chk_shadows.setChecked(True)
        performance_layout.addWidget(self.chk_shadows)
        
        self.chk_antialiasing = QCheckBox("Kh·ª≠ rƒÉng c∆∞a")
        self.chk_antialiasing.setChecked(True)
        performance_layout.addWidget(self.chk_antialiasing)
        
        self.quality_slider = QSlider(Qt.Orientation.Horizontal)
        self.quality_slider.setRange(1, 5)
        self.quality_slider.setValue(3)
        self.quality_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.quality_slider.setTickInterval(1)
        performance_layout.addWidget(QLabel("Ch·∫•t l∆∞·ª£ng:"))
        performance_layout.addWidget(self.quality_slider)
        
        layout.addWidget(performance_group)
        
        layout.addStretch()
        return panel
    
    def _create_visualization_area(self):
        """T·∫°o khu v·ª±c visualization ch√≠nh"""
        area = QGroupBox("üéÆ Khu v·ª±c 3D")
        layout = QVBoxLayout(area)
        
        # Placeholder cho WebEngine
        self.visualization_placeholder = QLabel("Khu v·ª±c visualization 3D\n(WebEngine s·∫Ω ƒë∆∞·ª£c t√≠ch h·ª£p ·ªü ƒë√¢y)")
        self.visualization_placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.visualization_placeholder.setStyleSheet("""
            QLabel {
                background-color: #2c3e50;
                color: white;
                border: 2px dashed #34495e;
                border-radius: 8px;
                padding: 40px;
                font-size: 16px;
            }
        """)
        layout.addWidget(self.visualization_placeholder)
        
        return area
    
    def _create_right_panel(self):
        """T·∫°o panel b√™n ph·∫£i v·ªõi th√¥ng tin"""
        panel = QGroupBox("üìä Th√¥ng tin")
        layout = QVBoxLayout(panel)
        
        # System info
        system_group = QGroupBox("H·ªá th·ªëng")
        system_layout = QVBoxLayout(system_group)
        
        self.lbl_length = QLabel("Chi·ªÅu d√†i: --")
        self.lbl_width = QLabel("Chi·ªÅu r·ªông: --")
        self.lbl_height = QLabel("Chi·ªÅu cao: --")
        self.lbl_speed = QLabel("T·ªëc ƒë·ªô: --")
        self.lbl_power = QLabel("C√¥ng su·∫•t: --")
        
        system_layout.addWidget(self.lbl_length)
        system_layout.addWidget(self.lbl_width)
        system_layout.addWidget(self.lbl_height)
        system_layout.addWidget(self.lbl_speed)
        system_layout.addWidget(self.lbl_power)
        
        layout.addWidget(system_group)
        
        # Component info
        component_info_group = QGroupBox("Th√†nh ph·∫ßn")
        component_info_layout = QVBoxLayout(component_info_group)
        
        self.lbl_belt_type = QLabel("BƒÉng t·∫£i: --")
        self.lbl_motor_info = QLabel("ƒê·ªông c∆°: --")
        self.lbl_gearbox_info = QLabel("H·ªôp s·ªë: --")
        self.lbl_idler_count = QLabel("Con lƒÉn: --")
        
        component_info_layout.addWidget(self.lbl_belt_type)
        component_info_layout.addWidget(self.lbl_motor_info)
        component_info_layout.addWidget(self.lbl_gearbox_info)
        component_info_layout.addWidget(self.lbl_idler_count)
        
        layout.addWidget(component_info_group)
        
        # Performance info
        performance_info_group = QGroupBox("Hi·ªáu su·∫•t")
        performance_info_layout = QVBoxLayout(performance_info_group)
        
        self.lbl_fps = QLabel("FPS: --")
        self.lbl_triangles = QLabel("Triangles: --")
        self.lbl_memory = QLabel("Memory: -- MB")
        
        performance_info_layout.addWidget(self.lbl_fps)
        performance_info_layout.addWidget(self.lbl_triangles)
        performance_info_layout.addWidget(self.lbl_memory)
        
        layout.addWidget(performance_info_group)
        
        layout.addStretch()
        return panel
    
    def _create_bottom_panel(self):
        """T·∫°o panel d∆∞·ªõi v·ªõi animation controls"""
        panel = QGroupBox("üé¨ ƒêi·ªÅu khi·ªÉn animation")
        layout = QHBoxLayout(panel)
        
        # Animation controls
        self.play_pause_btn = QPushButton("‚è∏Ô∏è T·∫°m d·ª´ng")
        self.play_pause_btn.setCheckable(True)
        self.play_pause_btn.setChecked(True)
        layout.addWidget(self.play_pause_btn)
        
        self.reset_btn = QPushButton("üîÑ Reset")
        layout.addWidget(self.reset_btn)
        
        layout.addWidget(QLabel("T·ªëc ƒë·ªô:"))
        
        self.speed_slider = QSlider(Qt.Orientation.Horizontal)
        self.speed_slider.setRange(10, 300)
        self.speed_slider.setValue(100)
        self.speed_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.speed_slider.setTickInterval(50)
        layout.addWidget(self.speed_slider)
        
        self.speed_label = QLabel("100%")
        layout.addWidget(self.speed_label)
        
        # Additional controls
        self.wireframe_btn = QPushButton("üìê Wireframe")
        self.wireframe_btn.setCheckable(True)
        layout.addWidget(self.wireframe_btn)
        
        self.fullscreen_btn = QPushButton("‚õ∂ Fullscreen")
        layout.addWidget(self.fullscreen_btn)
        
        self.export_btn = QPushButton("üíæ Xu·∫•t")
        layout.addWidget(self.export_btn)
        
        layout.addStretch()
        return panel
    
    def _setup_enhanced_features(self):
        """Thi·∫øt l·∫≠p t√≠nh nƒÉng n√¢ng cao"""
        # Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
        self._initialize_components()
        
        # Thi·∫øt l·∫≠p default values
        self._setup_default_values()
    
    def _initialize_components(self):
        """Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn"""
        # Component builders s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o khi c√≥ d·ªØ li·ªáu
        pass
    
    def _setup_default_values(self):
        """Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh"""
        # Camera preset
        self.camera_preset_combo.setCurrentText("T·ªïng quan")
        
        # Material mode
        self.material_combo.setCurrentText("Th·ª±c t·∫ø")
        
        # Performance settings
        self.quality_slider.setValue(3)
        self.chk_shadows.setChecked(True)
        self.chk_antialiasing.setChecked(True)
    
    def _setup_connections(self):
        """Thi·∫øt l·∫≠p c√°c k·∫øt n·ªëi signal-slot"""
        # Mode change
        self.mode_combo.currentTextChanged.connect(self._on_mode_changed)
        
        # Component visibility
        self.chk_belt_system.toggled.connect(self._on_component_visibility_changed)
        self.chk_drive_system.toggled.connect(self._on_component_visibility_changed)
        self.chk_support_structure.toggled.connect(self._on_component_visibility_changed)
        self.chk_material_flow.toggled.connect(self._on_component_visibility_changed)
        
        # Material mode
        self.material_combo.currentTextChanged.connect(self._on_material_mode_changed)
        
        # Camera controls
        self.camera_preset_combo.currentTextChanged.connect(self._on_camera_preset_changed)
        self.reset_camera_btn.clicked.connect(self._on_reset_camera)
        
        # Performance controls
        self.chk_shadows.toggled.connect(self._on_shadows_toggled)
        self.chk_antialiasing.toggled.connect(self._on_antialiasing_toggled)
        self.quality_slider.valueChanged.connect(self._on_quality_changed)
        
        # Animation controls
        self.play_pause_btn.toggled.connect(self._on_play_pause_toggled)
        self.reset_btn.clicked.connect(self._on_reset_animation)
        self.speed_slider.valueChanged.connect(self._on_speed_changed)
        self.wireframe_btn.toggled.connect(self._on_wireframe_toggled)
        self.fullscreen_btn.clicked.connect(self._on_fullscreen)
        self.export_btn.clicked.connect(self._on_export)
    
    def _on_mode_changed(self, mode):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ch·∫ø ƒë·ªô"""
        if mode == "N√¢ng cao":
            self.visualization_mode = 'enhanced'
        elif mode == "ƒê∆°n gi·∫£n":
            self.visualization_mode = 'simple'
        elif mode == "Ph√¢n t√≠ch":
            self.visualization_mode = 'analysis'
        
        self._update_visualization_mode()
    
    def _on_component_visibility_changed(self, checked):
        """X·ª≠ l√Ω khi thay ƒë·ªïi hi·ªÉn th·ªã th√†nh ph·∫ßn"""
        # C·∫≠p nh·∫≠t visibility c·ªßa c√°c th√†nh ph·∫ßn
        self._update_component_visibility()
    
    def _on_material_mode_changed(self, mode):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ch·∫ø ƒë·ªô material"""
        # C·∫≠p nh·∫≠t material mode
        self._update_material_mode(mode)
    
    def _on_camera_preset_changed(self, preset):
        """X·ª≠ l√Ω khi thay ƒë·ªïi camera preset"""
        # C·∫≠p nh·∫≠t camera position
        self._update_camera_preset(preset)
    
    def _on_reset_camera(self):
        """Reset camera v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu"""
        # Reset camera
        self._reset_camera()
    
    def _on_shadows_toggled(self, enabled):
        """X·ª≠ l√Ω khi toggle shadows"""
        # C·∫≠p nh·∫≠t shadow settings
        self._update_shadow_settings(enabled)
    
    def _on_antialiasing_toggled(self, enabled):
        """X·ª≠ l√Ω khi toggle antialiasing"""
        # C·∫≠p nh·∫≠t antialiasing settings
        self._update_antialiasing_settings(enabled)
    
    def _on_quality_changed(self, quality):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ch·∫•t l∆∞·ª£ng"""
        # C·∫≠p nh·∫≠t quality settings
        self._update_quality_settings(quality)
    
    def _on_play_pause_toggled(self, playing):
        """X·ª≠ l√Ω khi toggle play/pause"""
        if playing:
            self.play_pause_btn.setText("‚è∏Ô∏è T·∫°m d·ª´ng")
            self.animation_state_changed.emit(True)
        else:
            self.play_pause_btn.setText("‚ñ∂Ô∏è Ph√°t")
            self.animation_state_changed.emit(False)
    
    def _on_reset_animation(self):
        """Reset animation"""
        # Reset t·∫•t c·∫£ animation
        self._reset_animation()
    
    def _on_speed_changed(self, speed):
        """X·ª≠ l√Ω khi thay ƒë·ªïi t·ªëc ƒë·ªô"""
        self.speed_label.setText(f"{speed}%")
        # C·∫≠p nh·∫≠t animation speed
        self._update_animation_speed(speed / 100.0)
    
    def _on_wireframe_toggled(self, enabled):
        """X·ª≠ l√Ω khi toggle wireframe"""
        # C·∫≠p nh·∫≠t wireframe mode
        self._update_wireframe_mode(enabled)
    
    def _on_fullscreen(self):
        """X·ª≠ l√Ω khi click fullscreen"""
        # Toggle fullscreen
        self._toggle_fullscreen()
    
    def _on_export(self):
        """X·ª≠ l√Ω khi export"""
        # Export visualization
        self._export_visualization()
    
    def update_enhanced_visualization(self, params, result):
        """C·∫≠p nh·∫≠t visualization n√¢ng cao"""
        try:
            # T·∫°o m√¥ h√¨nh 3D t·ª´ tham s·ªë
            self.model_generator = ConveyorModelGenerator(params, result)
            model_data = self.model_generator.generate_complete_model()
            
            # T·∫°o animation engine
            self.animation_engine = ConveyorAnimationEngine(model_data)
            
            # L∆∞u d·ªØ li·ªáu hi·ªán t·∫°i
            self.current_data = model_data
            
            # C·∫≠p nh·∫≠t visualization
            self._load_enhanced_scene(model_data)
            
            # C·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã
            self._update_display_info(model_data)
            
            # Emit signal
            self.visualization_updated.emit(model_data)
            
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t visualization: {e}")
            # Fallback v·ªÅ ch·∫ø ƒë·ªô ƒë∆°n gi·∫£n
            self._fallback_to_simple_mode(params, result)
    
    def _load_enhanced_scene(self, model_data):
        """T·∫£i scene n√¢ng cao"""
        try:
            # Ch·ªçn template d·ª±a tr√™n mode
            if self.visualization_mode == 'enhanced':
                html_template = ENHANCED_HTML_TEMPLATE
                js_template = ENHANCED_JS_TEMPLATE
            elif self.visualization_mode == 'simple':
                html_template = SIMPLE_HTML_TEMPLATE
                js_template = BASIC_JS_TEMPLATE
            else:
                html_template = ENHANCED_HTML_TEMPLATE
                js_template = ENHANCED_JS_TEMPLATE
            
            # Format template v·ªõi d·ªØ li·ªáu
            html_content = self._format_html_template(html_template, model_data)
            js_content = self._format_js_template(js_template, model_data)
            
            # T·∫°o HTML ho√†n ch·ªânh
            complete_html = html_content.replace('{enhanced_js}', js_content)
            
            # Load v√†o WebEngine (placeholder)
            self._load_html_content(complete_html)
            
        except Exception as e:
            print(f"L·ªói khi t·∫£i scene: {e}")
    
    def _format_html_template(self, template, data):
        """Format HTML template v·ªõi d·ªØ li·ªáu"""
        try:
            # Extract data t·ª´ model_data
            belt_data = data.get('belt_system', {})
            drive_data = data.get('drive_system', {})
            support_data = data.get('support_structure', {})
            
            # Format template
            formatted = template.format(
                length=belt_data.get('properties', {}).get('length_m', 10.0),
                width=belt_data.get('properties', {}).get('width_m', 0.5),
                height=belt_data.get('properties', {}).get('height_m', 1.0),
                inclination=data.get('inclination_deg', 0.0),
                speed=data.get('belt_speed_mps', 2.0),
                power=drive_data.get('motor', {}).get('power_kw', 5.5),
                ratio=drive_data.get('gearbox', {}).get('ratio', 20.0),
                libs=self._get_threejs_libraries()
            )
            
            return formatted
            
        except Exception as e:
            print(f"L·ªói khi format HTML template: {e}")
            return template
    
    def _format_js_template(self, template, data):
        """Format JavaScript template v·ªõi d·ªØ li·ªáu"""
        try:
            # Format template v·ªõi d·ªØ li·ªáu
            formatted = template.replace('{data}', str(data))
            return formatted
            
        except Exception as e:
            print(f"L·ªói khi format JS template: {e}")
            return template
    
    def _get_threejs_libraries(self):
        """L·∫•y th∆∞ vi·ªán Three.js"""
        return """
        <script src="ui/js/three.min.js"></script>
        <script src="ui/js/GLTFLoader.js"></script>
        """
    
    def _load_html_content(self, html_content):
        """Load HTML content v√†o WebEngine"""
        # Placeholder - s·∫Ω ƒë∆∞·ª£c t√≠ch h·ª£p v·ªõi WebEngine
        print("Loading HTML content into WebEngine...")
        print(f"Content length: {len(html_content)} characters")
    
    def _update_display_info(self, model_data):
        """C·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã"""
        try:
            belt_data = model_data.get('belt_system', {})
            drive_data = model_data.get('drive_system', {})
            support_data = model_data.get('support_structure', {})
            
            # C·∫≠p nh·∫≠t th√¥ng tin h·ªá th·ªëng
            self.lbl_length.setText(f"Chi·ªÅu d√†i: {belt_data.get('properties', {}).get('length_m', 0):.1f} m")
            self.lbl_width.setText(f"Chi·ªÅu r·ªông: {belt_data.get('properties', {}).get('width_m', 0):.2f} m")
            self.lbl_height.setText(f"Chi·ªÅu cao: {belt_data.get('properties', {}).get('height_m', 0):.1f} m")
            self.lbl_speed.setText(f"T·ªëc ƒë·ªô: {model_data.get('belt_speed_mps', 0):.2f} m/s")
            self.lbl_power.setText(f"C√¥ng su·∫•t: {drive_data.get('motor', {}).get('power_kw', 0):.1f} kW")
            
            # C·∫≠p nh·∫≠t th√¥ng tin th√†nh ph·∫ßn
            self.lbl_belt_type.setText(f"BƒÉng t·∫£i: {belt_data.get('properties', {}).get('belt_type', 'EP')}")
            self.lbl_motor_info.setText(f"ƒê·ªông c∆°: {drive_data.get('motor', {}).get('power_kw', 0):.1f} kW")
            self.lbl_gearbox_info.setText(f"H·ªôp s·ªë: {drive_data.get('gearbox', {}).get('ratio', 0):.1f}")
            self.lbl_idler_count.setText(f"Con lƒÉn: {support_data.get('properties', {}).get('total_carrying_idlers', 0)}")
            
        except Exception as e:
            print(f"L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin hi·ªÉn th·ªã: {e}")
    
    def _fallback_to_simple_mode(self, params, result):
        """Fallback v·ªÅ ch·∫ø ƒë·ªô ƒë∆°n gi·∫£n"""
        print("Fallback v·ªÅ ch·∫ø ƒë·ªô ƒë∆°n gi·∫£n...")
        # Implement fallback logic
    
    def _update_visualization_mode(self):
        """C·∫≠p nh·∫≠t ch·∫ø ƒë·ªô visualization"""
        if hasattr(self, 'current_data') and self.current_data:
            self._load_enhanced_scene(self.current_data)
    
    def _update_component_visibility(self):
        """C·∫≠p nh·∫≠t visibility c·ªßa c√°c th√†nh ph·∫ßn"""
        # Implement component visibility update
        pass
    
    def _update_material_mode(self, mode):
        """C·∫≠p nh·∫≠t material mode"""
        # Implement material mode update
        pass
    
    def _update_camera_preset(self, preset):
        """C·∫≠p nh·∫≠t camera preset"""
        # Implement camera preset update
        pass
    
    def _reset_camera(self):
        """Reset camera"""
        # Implement camera reset
        pass
    
    def _update_shadow_settings(self, enabled):
        """C·∫≠p nh·∫≠t shadow settings"""
        # Implement shadow settings update
        pass
    
    def _update_antialiasing_settings(self, enabled):
        """C·∫≠p nh·∫≠t antialiasing settings"""
        # Implement antialiasing settings update
        pass
    
    def _update_quality_settings(self, quality):
        """C·∫≠p nh·∫≠t quality settings"""
        # Implement quality settings update
        pass
    
    def _reset_animation(self):
        """Reset animation"""
        # Implement animation reset
        pass
    
    def _update_animation_speed(self, speed):
        """C·∫≠p nh·∫≠t animation speed"""
        # Implement animation speed update
        pass
    
    def _update_wireframe_mode(self, enabled):
        """C·∫≠p nh·∫≠t wireframe mode"""
        # Implement wireframe mode update
        pass
    
    def _toggle_fullscreen(self):
        """Toggle fullscreen"""
        # Implement fullscreen toggle
        pass
    
    def _export_visualization(self):
        """Export visualization"""
        # Implement export functionality
        pass
    
    def _update_performance_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin hi·ªáu su·∫•t"""
        # Placeholder - s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ WebEngine
        self.lbl_fps.setText("FPS: 60")
        self.lbl_triangles.setText("Triangles: 1,234")
        self.lbl_memory.setText("Memory: 45 MB")
    
    def get_visualization_data(self):
        """L·∫•y d·ªØ li·ªáu visualization hi·ªán t·∫°i"""
        return self.current_data
    
    def set_visualization_mode(self, mode):
        """Thi·∫øt l·∫≠p ch·∫ø ƒë·ªô visualization"""
        self.mode_combo.setCurrentText(mode)
    
    def toggle_animation(self, playing):
        """Toggle animation"""
        self.play_pause_btn.setChecked(playing)
    
    def set_animation_speed(self, speed):
        """Thi·∫øt l·∫≠p t·ªëc ƒë·ªô animation (0.1 - 3.0)"""
        speed_percent = int(speed * 100)
        self.speed_slider.setValue(speed_percent)
    
    def highlight_component(self, component_type):
        """Highlight th√†nh ph·∫ßn ƒë∆∞·ª£c ch·ªçn"""
        self.component_selected.emit(component_type)
    
    def refresh_visualization(self):
        """Refresh visualization"""
        if hasattr(self, 'current_data') and self.current_data:
            self._load_enhanced_scene(self.current_data)
