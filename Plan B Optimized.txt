
# Kế hoạch triển khai cho Cursor

## 0) Nguyên tắc & mục tiêu

* **Chọn hộp số trước**, để tốc độ trục ra **không lớn hơn nhiều** so với tốc độ puly yêu cầu.
* Sau đó chọn **tỉ số nhông \~ 2.0** (ưu tiên 1.6–2.2) → giảm mài mòn.
* Tối ưu theo thứ tự: **sai số vận tốc** → **tổng số răng nhỏ** → **i\_s gần 1.9** → **(tuỳ chọn) chi phí**.
* (Nếu có dữ liệu) **kiểm tra bền xích** với hệ số an toàn.

---

## 1) Việc cần làm theo commit (atomic)

### 1.1. specs.py – chuẩn hóa danh sách hộp số & tham số

**File:** `core/specs.py`
**Tasks**

* Thay `STANDARD_GEARBOX_RATIOS` sang danh sách quét **giảm dần**:

  ```python
  STANDARD_GEARBOX_RATIOS = [100, 80, 60, 50, 40, 30, 25, 20, 15, 12.5, 10, 8, 6, 5]
  ```
* (Tuỳ chọn) thêm:

  ```python
  CHAIN_SAFETY_FACTOR_DEFAULT = 8.0
  PREFERRED_CHAIN_RATIO = 1.9
  PREFERRED_CHAIN_RANGE = (1.6, 2.2)
  ```

**Acceptance**

* Import được từ engine, không gây lỗi.
* Ratios quét theo thứ tự giảm dần.

### 1.2. engine.py – thay thế logic chọn truyền động

**File:** `core/engine.py`
**Tasks**

* **Thay hẳn** hàm `select_transmission(...)` bằng phiên bản mới (đã gửi ở tin trước).
  Điểm chính:

  * Tính $n_{pulley,req}$ từ $V$ và $D$.
  * Lọc các `ig` có $i_{s,tar} = n_{out}/n_{pulley,req}$ nằm trong $[1.2, 3.0]$, **ưu tiên** vùng $[1.6, 2.2]$.
  * Quét `z1` = 17..25, tính `z2 = round(z1*i_s_tar)` (giới hạn ≤120).
  * Tính vận tốc thực tế, sai số (%).
  * Sắp xếp theo `(error, z1+z2, |i_s-1.9|)`.
  * Gán xích nhỏ nhất **đủ bền** nếu có dữ liệu bền trong CSV; nếu không, vẫn set designation/pitch cơ bản.
* Trong `calculate(...)`: truyền `required_power_kw` (nếu có) vào `select_transmission(...)`:

  ```python
  transmission_solution = select_transmission(
      target_velocity=p.V_mps,
      pulley_diameter=result.recommended_pulley_diameters_mm.get('A', 500),
      motor_rpm=p.motor_rpm,
      chain_specs=ACTIVE_CHAIN_SPECS,
      required_power_kw=result.required_power_kw or None
  )
  result.transmission = transmission_solution
  ```

**Acceptance**

* Build/Run không lỗi.
* In `DEBUG` ngắn gọn khi tìm thấy/không tìm thấy giải pháp.

### 1.3. models.py – giữ dataclass, đồng bộ trường

**File:** `core/models.py`
**Tasks**

* **Không** chuyển sang Pydantic. Giữ các dataclass như hiện tại.
* Đảm bảo `CalculationResult` có `transmission: Optional['TransmissionSolution'] = None` (đã có).
* `TransmissionSolution` giữ các field: `gearbox_ratio`, `drive_sprocket_teeth`, `driven_sprocket_teeth`, `chain_pitch_mm`, `actual_belt_velocity`, `error`, `chain_designation`, `total_transmission_ratio`.

**Acceptance**

* Kiểu dữ liệu thống nhất với code engine mới.
* Không phải sửa UI/export vì đổi tên trường.

### 1.4. UI – hiển thị kết quả gọn, không vỡ layout

**Files:**

* `ui/ui_components_3d_enhanced.py` (Output panel)
* `ui/main_window_3d_enhanced.py` (display\_results)

**Tasks**

* Thêm group “**Bộ truyền động**” (nếu chưa có):

  * Hộp số: `1 : {gearbox_ratio}`
  * Nhông: `{z1} / {z2}` (≈ {z2/z1:.2f})
  * Vận tốc thực tế: `{actual_belt_velocity:.3f} m/s`
  * Sai số: `{error:.2f}%`
  * Xích: `{chain_designation} — {chain_pitch_mm} mm`
* Nếu `result.transmission is None` → hiển thị “Không tìm thấy giải pháp phù hợp”.

**Acceptance**

* Mở app → nhập bộ tham số test → thấy khối “Bộ truyền động” hiển thị đúng.

### 1.5. (Tuỳ chọn) reports – thêm block “Bộ truyền động”

**Files:** `reports/exporter_pdf.py`, `reports/exporter_excel.py`
**Tasks**

* Thêm bảng “Thông số bộ truyền động” với các trường y như UI.
* Nếu `None` → ghi chú “Không có”.

**Acceptance**

* Export PDF/Excel không lỗi, có thông tin bộ truyền động.

---

## 2) Test Plan (quan trọng – để Cursor tự chạy)

### 2.1. Unit-like test (script nhỏ)

**Tạo file** `tests/test_transmission_example.py` (hoặc 1 script tạm ở gốc để chạy nhanh).
**Arrange**:

* `V = 2.5 m/s`, `D = 630 mm`, `motor_rpm = 1450`.
* Mock `ACTIVE_CHAIN_SPECS` đủ vài mẫu pitch (12.7, 15.875, 19.05…) – nếu chưa có CSV tương ứng thì tạo 2–3 bản ghi dummy (bỏ qua bền kéo).
  **Act**: gọi `select_transmission(...)`.
  **Assert (tolerances)**:
* Chọn hộp số **10** (ưu tiên), hoặc hộp số khác **nhưng** sao cho $i_s$ nằm trong \[1.6, 2.2].
* Một nghiệm “đẹp”: `z1=20, z2=38` (i\_s≈1.90)
* `actual_belt_velocity` trong **±2%** so với 2.5 m/s (tức 2.45–2.55 m/s).
* `error < 2%`.

### 2.2. Golden-case (số kiểm)

* $C = 0.63 * 3.1416 ≈ 1.98$ m
* $V_{mpm} = 150$ m/phút
* $n_{pulley,req} ≈ 75.76$ v/phút
* `ig = 10` → $n_{out} = 145$ → $i_{s,tar} ≈ 1.91$.
* Chọn **(20/38)** → $i_s = 1.90$, $i_{tot} = 19$, $n_{pulley,act} ≈ 76.32$ → $V_{act} ≈ 151.1$ m/phút → $2.518 \, m/s$ → **error ≈ 0.73%** ✅

### 2.3. Edge cases

* V nhỏ/D lớn → $n_{pulley,req}$ nhỏ: vẫn tìm được `ig` để $i_s$ trong \[1.2,3.0].
* Không tìm được `ig` hợp lệ → trả `None` (UI/Export phản hồi tử tế).
* CSV thiếu bền kéo → vẫn chạy (bỏ qua check bền).

---

## 3) Chuẩn Commit / PR checklist

**Commit 1:** `specs: reorder gearbox ratios (desc) + add safety defaults`
**Commit 2:** `engine: replace select_transmission with gearbox-first logic`
**Commit 3:** `ui: show transmission block + graceful no-solution state`
**Commit 4 (opt):** `reports: add transmission section`
**Commit 5:** `tests: add transmission example + edge cases`

**PR description (gợi ý)**

* Summary: Thay logic chọn truyền động: chọn hộp số trước, rồi nhông \~2.0, giảm mài mòn; ưu tiên sai số nhỏ.
* Technical notes: công thức tính $n_{pulley,req}$, bộ tiêu chí sắp xếp (error → z1+z2 → |i\_s−1.9|), fallback khi thiếu bền kéo.
* Risk: thay đổi thuật toán → đã có test ví dụ 2.5 m/s (sai số <1%).
* Screenshots: UI trước/sau (nếu có).
* Checklist:

  * [ ] Unit script chạy pass
  * [ ] UI hiển thị đúng
  * [ ] Export không lỗi
  * [ ] Không phá vỡ API hiện có

---


## 4) Done means done ✅

* Chạy test ví dụ cho ra **ig=10** và **(20/38)** (hoặc cặp rất gần 1.9) với **error < 2%**.
* UI thấy đủ 5 dòng thông tin.
* Không crash dù thiếu dữ liệu bền kéo.

---

okie, giao “Cursor” chiến thôi. có gì khựng… huýt sáo gọi mình, mình lại “vặn nhông” tiếp! 🛠️✨
