Mục tiêu: Nâng cấp phần mềm để tích hợp module tính toán và tự động lựa chọn bộ truyền động hoàn chỉnh, bao gồm Hộp số giảm tốc và bộ truyền Nhông-xích, dựa trên các thông số đầu vào (vận tốc băng tải, đường kính puly, và tốc độ động cơ).

Logic mới:
1.  Tính toán tốc độ quay yêu cầu của puly từ vận tốc băng tải và đường kính puly.
2.  Tính toán tổng tỉ số truyền yêu cầu từ tốc độ động cơ và tốc độ puly.
3.  Phần mềm sẽ duyệt qua danh sách các tỉ số truyền hộp số tiêu chuẩn (ví dụ: 5, 10, 15, 20...).
4.  Với mỗi tỉ số truyền hộp số, phần mềm sẽ tính toán tỉ số truyền nhông-xích cần thiết.
5.  Sau đó, tìm kiếm một cặp nhông (nhông dẫn, nhông bị dẫn) phù hợp để đạt được tỉ số truyền đó.
6.  Cuối cùng, đề xuất tổ hợp Hộp số + Nhông-xích cho kết quả gần đúng nhất với yêu cầu.

---
### Giai đoạn 1: Chuẩn bị và Quản lý Dữ liệu (Không thay đổi)
Mục tiêu: Thiết lập cơ chế đọc dữ liệu xích từ file CSV để dễ dàng bảo trì và mở rộng.

1.  **Tạo Model Dữ liệu cho Xích:**
    * **File:** `core/models.py`
    * **Hành động:** Sử dụng Pydantic model `ChainSpec` đã có để định nghĩa cấu trúc dữ liệu cho một loại xích.

2.  **Tạo Hàm Tải Dữ liệu Xích:**
    * **File:** `core/specs.py`
    * **Hành động:** Sử dụng hàm `load_chain_data()` đã có để đọc và xử lý dữ liệu từ các file CSV trong thư mục `data`.

---
### Giai đoạn 2: Bổ sung Dữ liệu Hộp số Giảm tốc
Mục tiêu: Thêm dữ liệu về các tỉ số truyền tiêu chuẩn của hộp số giảm tốc.

1.  **Thêm Dữ liệu Hộp số:**
    * **File:** `core/specs.py`
    * **Hành động:**
        * Tạo một danh sách (list) chứa các tỉ số truyền phổ biến của hộp số giảm tốc. Ví dụ: `STANDARD_GEARBOX_RATIOS = [5, 10, 15, 20, 25, 30, 40, 50, 60, 80, 100]`.
        * Hàm này sẽ cung cấp một danh sách các tỉ số truyền để module tính toán có thể duyệt qua.

---
### Giai đoạn 3: Cập nhật Calculation Engine
Mục tiêu: Viết lại logic cốt lõi để thực hiện việc lựa chọn tổ hợp hộp số và nhông-xích.

1.  **Mở rộng `CalculationResult` Model:**
    * **File:** `core/models.py`
    * **Hành động:**
        * Tạo một Pydantic model mới `TransmissionSolution` để chứa thông tin về một giải pháp truyền động hoàn chỉnh:
          ```python
          class TransmissionSolution(BaseModel):
              gearbox_ratio: float = Field(..., description="Tỉ số truyền của hộp số")
              drive_sprocket_teeth: int = Field(..., description="Số răng nhông dẫn")
              driven_sprocket_teeth: int = Field(..., description="Số răng nhông bị dẫn")
              chain_pitch_mm: float = Field(..., description="Bước xích (mm)")
              actual_belt_velocity: float = Field(..., description="Vận tốc băng tải thực tế (m/s)")
              error: float = Field(..., description="Sai số so với vận tốc yêu cầu (%)")
          ```
        * Trong model `CalculationResult`, thay thế `chain_drive: Optional[ChainDriveResult]` bằng `transmission: Optional[TransmissionSolution]`.

2.  **Xây dựng Logic Tính toán Chính:**
    * **File:** `core/engine.py`
    * **Hành động:**
        * Tạo một hàm mới, ví dụ: `select_transmission(target_velocity: float, pulley_diameter: float, motor_rpm: int, chain_specs: list[ChainSpec]) -> Optional[TransmissionSolution]:`
        * **Các bước trong hàm:**
            a.  **Tính toán yêu cầu:**
                * Tính tốc độ quay yêu cầu của puly (vòng/phút): `rpm_pulley = (target_velocity * 60) / (math.pi * pulley_diameter / 1000)`.
                * Tính tổng tỉ số truyền yêu cầu: `i_total_required = motor_rpm / rpm_pulley`.
            b.  **Khởi tạo biến:**
                * Tạo một danh sách `possible_solutions = []` để lưu các giải pháp hợp lệ.
            c.  **Vòng lặp chính - Duyệt qua các hộp số:**
                * `for gearbox_ratio in STANDARD_GEARBOX_RATIOS:`
                * Tính tỉ số truyền nhông-xích mục tiêu: `i_sprocket_target = i_total_required / gearbox_ratio`.
                * Giới hạn `i_sprocket_target` trong khoảng hợp lý (ví dụ: từ 1 đến 7) để tránh các bộ truyền quá lớn hoặc không hiệu quả.
            d.  **Vòng lặp phụ - Tìm cặp nhông phù hợp:**
                * Duyệt qua số răng nhông dẫn `z1` trong một khoảng hợp lý (ví dụ: từ 17 đến 25 răng).
                * Tính số răng nhông bị dẫn lý thuyết: `z2_ideal = z1 * i_sprocket_target`.
                * Làm tròn `z2_ideal` đến số nguyên gần nhất để có `z2_actual`. Đảm bảo `z2_actual` không quá lớn (ví dụ: < 120 răng).
                * Tính lại tỉ số truyền thực tế: `i_sprocket_actual = z2_actual / z1`.
                * Tính tổng tỉ số truyền thực tế: `i_total_actual = gearbox_ratio * i_sprocket_actual`.
                * Tính vận tốc băng tải thực tế: `actual_velocity = (motor_rpm / i_total_actual) * (math.pi * pulley_diameter / 1000) / 60`.
                * Tính sai số: `error = abs(actual_velocity - target_velocity) / target_velocity`.
                * Lưu giải pháp `(gearbox_ratio, z1, z2_actual, actual_velocity, error)` vào danh sách `possible_solutions`.
            e.  **Lựa chọn giải pháp tốt nhất:**
                * Sau khi duyệt qua tất cả các khả năng, sắp xếp `possible_solutions` theo `error` tăng dần.
                * Trả về giải pháp có `error` nhỏ nhất. Nếu không tìm thấy giải pháp nào, trả về `None`.

3.  **Tích hợp vào `calculate()`:**
    * **File:** `core/engine.py`
    * **Hành động:**
        * Trong hàm `calculate()`, gọi hàm `select_transmission()` mới.
        * Lưu kết quả trả về vào `result.transmission`.

---
### Giai đoạn 4: Cập nhật Giao diện Người dùng (UI)
Mục tiêu: Thêm trường nhập "Tốc độ động cơ" và hiển thị kết quả bộ truyền động được đề xuất.

1.  **Thêm trường nhập liệu:**
    * **File:** `ui/ui_components_3d_enhanced.py`
    * **Hành động:**
        * Trong `InputPanel`, thêm một `QComboBox` hoặc `QLineEdit` cho phép người dùng nhập hoặc chọn tốc độ động cơ (ví dụ: các giá trị phổ biến như 1450, 2900 vòng/phút).
        * Gán một objectName (`motor_rpm_input`) để `main_window` có thể truy xuất giá trị.

2.  **Cập nhật `main_window` để xử lý đầu vào:**
    * **File:** `ui/main_window_3d_enhanced.py`
    * **Hành động:**
        * Trong hàm `perform_calculation()`, đọc giá trị từ `motor_rpm_input`.
        * Truyền giá trị này vào hàm `engine.calculate()`.

3.  **Hiển thị kết quả:**
    * **File:** `ui/ui_components_3d_enhanced.py`
    * **Hành động:**
        * Trong `OutputPanel`, thêm các `QLabel` mới để hiển thị các thông số của bộ truyền động được chọn:
            * "Tỉ số truyền hộp số:"
            * "Số răng nhông dẫn:"
            * "Số răng nhông bị dẫn:"
            * "Vận tốc băng tải thực tế:"
    * **File:** `ui/main_window_3d_enhanced.py`
    * **Hành động:**
        * Trong hàm `display_results()`, kiểm tra `result.transmission`.
        * Nếu có kết quả, cập nhật các `QLabel` tương ứng. Nếu không (kết quả là None), hiển thị thông báo "Không tìm thấy bộ truyền phù hợp".

---
### Giai đoạn 5: Cập nhật Chức năng Xuất Báo cáo (Không thay đổi logic)
Mục tiêu: Đưa các thông số của bộ truyền động đã chọn vào báo cáo PDF và Excel.

1.  **Cập nhật Exporter PDF:**
    * **File:** `reports/exporter_pdf.py`
    * **Hành động:**
        * Trong hàm tạo báo cáo, kiểm tra sự tồn tại của `result.transmission`.
        * Nếu có, thêm một bảng mới với tiêu đề "Thông số bộ truyền động" và điền các giá trị tương ứng.

2.  **Cập nhật Exporter Excel:**
    * **File:** `reports/exporter_excel.py`
    * **Hành động:**
        * Tương tự như PDF, thêm các hàng mới vào file Excel để ghi lại các thông số của bộ truyền động đã được chọn.

---
### Giai đoạn 6: Kiểm thử và Hoàn thiện
Mục tiêu: Đảm bảo tính năng mới hoạt động chính xác và ổn định.

1.  **Test logic tính toán:**
    * Kiểm tra hàm `select_transmission()` với các bộ đầu vào khác nhau (vận tốc, đường kính, tốc độ động cơ) để đảm bảo kết quả trả về là hợp lý và có sai số thấp.
2.  **Test giao diện:**
    * Chạy thử phần mềm, nhập các giá trị khác nhau để đảm bảo giao diện không bị lỗi, kết quả hiển thị đúng và báo cáo xuất ra đầy đủ thông tin.